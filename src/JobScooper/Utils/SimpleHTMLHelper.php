<?php
/**
 * Copyright 2014-17 Bryan Selner
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
namespace JobScooper\Utils;

use DiDom\Document;
use DiDom\Query;
use DiDom\Element;
use DOMElement;

class ExtendedDiDomElement extends Element
{
    function __get($name) {
        switch ($name) {
            case 'plaintext':
                return $this->text();
                break;
            default:
                return parent::__get($name);
        }
    }
}

class SimpleHTMLHelper extends Document
{
    function __construct($data)
    {
        $isFile = false;
        $string = $data;

        if(is_string($data))
        {
            if(strncasecmp($data, "http", strlen("http")) === 0)
            {
                $isFile = true;
                $string = $data;
            }
            elseif(is_file($data) === true)
            {
                $isFile = true;
                $string = $data;
            }
            else
            {
                $string = $data;
                $isFile = false;
            }
        }
        elseif(is_object($data) === true) {
            $string = strval($data);
            $isFile = false;
        }

        parent::__construct($string, $isFile);
    }

    function findByXpath($xpath)
    {
        return $this->find($xpath, Query::TYPE_XPATH);
    }

    function find($expression, $type = Query::TYPE_CSS, $wrapNode = true, $contextNode = null)
    {
        $ret = parent::find($expression, $type, $wrapNode, $contextNode); // TODO: Change the autogenerated stub
        if (is_array($ret)) {
            $retExt = array();
            foreach ($ret as $elem) {
                $retExt[] = new ExtendedDiDomElement($elem->getNode());
            }
            return $retExt;
        } elseif (is_a($ret, "Element", true)) {
            return new ExtendedDiDomElement($ret->getNode());
        }
        throw new \Exception("Invalid return type from DiDom->Find");
    }
}